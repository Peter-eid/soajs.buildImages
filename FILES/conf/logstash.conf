input {
	beats {
		port => 12201
	}
}
filter {
	if [source] {
		grok {
			match => ["source", "%{GREEDYDATA}/%{WORD:soajs_env}-%{WORD:service}-%{WORD:containerName}-%{WORD:log_type}.log"]
		}
	}
	if [type] and "_grokparsefailure" in [tags] {
		mutate {
			remove_tag => ["_grokparsefailure"]
			}
		grok {
			match => ["type", "service : %{WORD:service} , container : %{WORD:containerName} , env : %{WORD:soajs_env} , logType : %{WORD:log_type}"]
		}
	}
	if [log_type] == "access" {
		grok {
			match => ["message", "%{IPORHOST:http_host} %{IPORHOST:clientip} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} %{NUMBER:request_time:float} (?:%{NUMBER:upstream_time:float})",
					  "message", "%{COMBINEDAPACHELOG}+%{GREEDYDATA:extra_fields}"
					]
			overwrite => ["message"]
		}
		mutate {
			convert => ["response", "integer"]
			convert => ["bytes", "integer"]
			convert => ["responsetime", "float"]
		}
	} else if [log_type] == "error" {
		grok {
			match => ["message", "(?<timestamp>%{YEAR}[./]%{MONTHNUM}[./]%{MONTHDAY} %{TIME}) \[%{LOGLEVEL:severity}\] %{POSINT:pid}#%{NUMBER}: %{GREEDYDATA:errormessage}(?:, client: %{IP:clientip})(?:, server: (%{IPORHOST:server})?)(?:, request: \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\")?(?:, upstream: \"%{URI:upstream}\")?(?:, host: %{QS:host})?(?:, referrer: \"%{URI:referrer}\")?"]
		}
	} else if [log_type] == "service"{

		grok {
			match => ['message', '%{IPORHOST:clientip} \- \- \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent}',
				'message', '^.*?(?<logged_json>{.*)',
				'message', '%{TIMESTAMP_ISO8601:time} %{GREEDYDATA:uncaughtException}'
			]
		}
		mutate {
			gsub => ['logged_json', '\n', '']
			convert => ["bytes", "integer"]
			convert => ["response", "integer"]
		}
		json {
			source => "logged_json"
			remove_field => ["logged_json"]
			add_tag => [ "json" ]
		}

	}
	if "_jsonparsefailure" in [tags] or "_grokparsefailure" in [tags] {
		drop {}
	}
	else if "json" in [tags] {
		mutate {
			replace => {"log_type" => "json"}
		}
	}
	if ![agent] and [header][user-agent] {
		mutate {
			add_field => {"agent" => "%{[header][user-agent]}"}
		}
	}
	if [uncaughtException] {
		mutate {
			replace => {"log_type" => "uncaughtexception"}
		}
	}
	if [clientip] in ["127.0.0.1", "::ffff:127.0.0.1"] {
		mutate {
			replace => ["clientip", "141.138.186.178"]
		}
	}
	if [host] in ["127.0.0.1", "::ffff:127.0.0.1"] {
		mutate {
			replace => ["host", "141.138.186.178"]
		}
	}
	mutate {
			remove_field => ["path","logged_json","fields","count","offset","input_type","@version","tags","v","source","type"]
			rename => { "_index" => "index"}
			rename => { "_type" => "type"}
			rename => { "_id" => "id"}
			rename => { "_shards" => "shards"}
			rename => { "_version" => "version"}
		}
	useragent {
			source => "agent"
			target => "user_agent"
		}
	geoip {
		source => "host"
		target => "geoip"
	}
	geoip {
		source => "clientip"
		target => "geoip"
	}
	if [time] and ![timestamp]{
			date {
			match => ["time", "yyyy-MM-dd'T'HH:mm:ss.SSSZ"]
			remove_field => ["time"]
		}
		}
		else if [log_type] == "error" and [service] == "nginx" {
			date {
			match => ["timestamp", "YYYY/MM/dd HH:mm:ss"]
			remove_field => ["timestamp"]
		}
		}
		else {
			date {
			match => ["timestamp", "dd/MMM/YYYY:HH:mm:ss Z"]
			remove_field => ["timestamp"]
		}
		}
		if [@metadata][beat] and [service] and [soajs_env] and [containerName] and [log_type] {
			mutate {
				update => {"[@metadata][beat]" => "%{[@metadata][beat]}-%{service}-%{soajs_env}-%{containerName}-%{log_type}"}
			}
		}
}

output {
		elasticsearch {
		hosts => "elasticsearch:9200"
		index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
	}
}
